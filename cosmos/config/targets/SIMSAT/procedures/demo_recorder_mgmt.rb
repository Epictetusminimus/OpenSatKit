################################################################################
# Recorder Management Demo 
#
# Notes:
#   1. RMD_INSTRUCT_x variables are used to put text on the demo screen's
#      instruction text box. The RMD_INFO_x variables are used for extra detailed
#      information that is displayed on a separate screen.
#   2. Debug events are enabled for the apps used during the demo.
# 
# Demo Steps:
#   1. Dump packet filter and file table 
#   2. Enable Event and HK files, Send noop events and update DS file info
#   3. Stop recording, transfer and display event file 
#
#
# License:
#   Written by David McComas, licensed under the copyleft GNU General Public
#   License (GPL).
#
################################################################################

require 'osk_global'
require 'osk_system'
require 'osk_flight'
require 'simsat_const'


######################
## Global Variables ##
######################

RMD_EVENT_FILTER_TBL_IDX = 6
RMD_EVENT_FILE_TBL_IDX   = 0
RMD_HK_FILE_TBL_IDX      = 1

RMD_TBL_PATH_FILE = "#{Osk::FLT_SRV_DIR}/#{Osk::TMP_TBL_FILE}"

RMD_EVS_FILE = "events1000.dat"   # Assumes DS configured for 4 digit count in file name 
RMD_EVS_PATH_FILE = "#{SimSat::FLT_REC_DIR}/#{RMD_EVS_FILE}"


###########
## Setup ##
###########

Osk::System.check_n_start_cfs('simsat')

display("SIMSAT RECORDER_MGMT_SCREEN",1500,50)    
cmd("CFE_EVS ENA_APP_EVENT_TYPE with APP_NAME DS, BITMASK 0x01") # Enable debug events

# Creates simsat recorder directory if needed
Osk::Ops.create_flt_dir(SimSat::FLT_SRV_DIR)  
Osk::Ops.create_flt_dir(SimSat::FLT_REC_DIR)  

wait # Setup notes: 
# This demo illustrates some basic recorder management features. This demo
# concentrates on the Data Storage(DS) app. Onboard recorder management is
# much more complicated and involves multiple apps.
# 
# DS accepts packets from the Software Bus(SB) and writes them to files. Files
# can be generated by apps other than DS. Science payloads, cameras, etc. often
# have an app that manages their interface and create data files. Files are
# also generated in response to commands (e.g. SB routing tables). 
#
# Each mission must design a file management scheme that includes when files
# are closed, how they are downlinked in a prioritized order, when files are
# deleted and by whom.  The CCSDS File Data Protocol (CFDP) app (CF) includes
# features that help with these tasks.

###################################################
## Step 1 - Dump DS packet filter and file table ##
###################################################


wait # Step 1
# Two DS tables control the app's behavior. The 'filter' table defines which
# packets will be sent to a file. This includes a packet filtering algorithm.
# The 'file' table defines how a file is named and when it should be closed.
#
# Each table is dumped and displayed in the COSMOS Table Manager tool
               
cmd_str = "DUMP_TBL with ACTIVE_TBL_FLAG 1, TABLE_NAME DS.FILTER_TBL, "
Osk::Ops::send_flt_bin_file_cmd("CFE_TBL", cmd_str, "Definition file for #{Osk::TBL_MGR_DEF_DS_FILTER_TBL}", flt_path_filename: RMD_TBL_PATH_FILE, gnd_rel_path: Osk::REL_SRV_TBL_DIR)

cmd_str = "DUMP_TBL with ACTIVE_TBL_FLAG 1, TABLE_NAME DS.FILE_TBL, "
Osk::Ops::send_flt_bin_file_cmd("CFE_TBL", cmd_str, "Definition file for #{Osk::TBL_MGR_DEF_DS_FILE_TBL}", flt_path_filename: RMD_TBL_PATH_FILE, gnd_rel_path: Osk::REL_SRV_TBL_DIR)

wait # Step notes:
# Message #{Fsw::MsgId::CFE_EVS_EVENT_MSG_MID} is the event message ID and note
# that its file table index is #{RMD_EVENT_FILE_TBL_IDX}. Defining an event
# message file is a common mission design pattern. The packet filter table
# passes every event message to the file.  The event file can be dumped at the
# start of a ground contact.
#
# The housekeeping (HK) app combines pieces of packets into a new packet. HK's
# default table is defined to combine the command counters from each cFE
# service app's housekeeping into a new combined cFS HK packet. DS's default
# table defines a file to store this packet. 


########################################
## Step 2 - Enable Event and HK files ##
########################################

display("DS FILE_1_4_INFO_SCREEN")    
display("FM OPEN_FILES_SCREEN")   

wait # Step 2
# DS's file table defaults to disabled. After you enable the files, commands
# are sent to request the DS's file info telemetry packet and FM's open file
# telemetry packet. The packets are displayed in their respective windows
#

Osk::flight.send_cmd("DS","SET_FILE_STATE with FILE_TBL_IDX #{RMD_EVENT_FILE_TBL_IDX}, FILE_STATE 1")
wait 2
Osk::flight.send_cmd("DS","SET_FILE_STATE with FILE_TBL_IDX #{RMD_HK_FILE_TBL_IDX}, FILE_STATE 1")
wait 4
Osk::flight.send_cmd("DS","SEND_FILE_INFO")
wait 1
Osk::flight.send_cmd("FM","SEND_OPEN_FILES")

wait
# Observe the files listed in the DS and FM screens
# 
# When you select <Go> this script will enter a loop that sends noop commands
# that will be stored in the event file. The loop takes over a minute. If you
# want to speed it up you can enter <Go> during sleeps and wait statements
# 

["CFE_ES", "CFE_EVS", "CFE_SB", "CFE_TBL", "CFE_TIME"].each { |cfe_srv|
   Osk::Ops::send_flt_cmd(cfe_srv, "#{Osk::CMD_STR_NOOP}")
   sleep(4)
   Osk::flight.send_cmd("DS","SEND_FILE_INFO")
   sleep(1)
}       
wait 2                  
Osk::flight.send_cmd("FM","SEND_OPEN_FILES")

wait # Step 2 notes:
# Executive services event log is often used as the operational strategy
# for saving events and dumping stored events at the start of a contact so
# ground ops can determine what events ocurred since the last contact. Both
# cFE ES and DS strategies are valid approaches and your concept of operations
# and how your mission uses events will determine what's best for you. 
#
# The housekeeping (HK) app combines pieces of packets into a new packet. HK's
# default table is defined to combine the command counters from each cFE service app's housekeeping into a new combined cFS HK packet. DS's default \
#table defines a file to store this packet. \ 

##############################################################
## Step 3 - Stop recording, transfer and display event file ##
##############################################################

wait # Step 3
# This step performs the following activities:
#   1. Stop recording the housekeeping and event files, but don't close the
#      files and observe the DS and FM file info states
#   2. Close the files and observe the DS and FM file info states
#   3. Transfer and display the event file log in Table Manager
# 

Osk::flight.send_cmd("DS","SET_FILE_STATE with FILE_TBL_IDX #{RMD_EVENT_FILE_TBL_IDX}, FILE_STATE 0")
wait 2
Osk::flight.send_cmd("DS","SET_FILE_STATE with FILE_TBL_IDX #{RMD_HK_FILE_TBL_IDX}, FILE_STATE 0")
wait 2
Osk::flight.send_cmd("DS","SEND_FILE_INFO")
wait 2
Osk::flight.send_cmd("FM","SEND_OPEN_FILES")

wait # Enter <Go> to close the files
 
Osk::flight.send_cmd("DS","CLOSE_ALL")
wait 2
Osk::flight.send_cmd("DS","SEND_FILE_INFO")
wait 1
Osk::flight.send_cmd("FM","SEND_OPEN_FILES")

wait # Enter <Go> to close the files

Osk::Ops::get_flt_bin_file(RMD_EVS_PATH_FILE, Osk::REL_SRV_DIR, RMD_EVS_FILE, Osk::TBL_MGR_DEF_DS_EVENT_LOG,25)

wait # Enter <Go> to exit the demo

#############
## Cleanup ##
#############

clear("SIMSAT RECORDER_MGMT_SCREEN")    
clear("DS FILE_1_4_INFO_SCREEN")    
clear("FM OPEN_FILES_SCREEN") 
